//mpiC++ xyz.cpp
//mpirun -np 4 a.out


//binary search





#include <iostream>
#include<mpi/mpi.h>
#include<cstdlib>
using namespace std;

void binarySearch(int *arr,int start, int end,int key,int rank)
{
	while(start<=end)
	{
		int mid=(start+end)/2;
		if(arr[mid]==key)
		{
			cout<<"Element is  Found by processor "<<rank<<" .\n";
			return;
		}
		else if(arr[mid]<key)
		{
			start=mid+1;
		}
		else
		{
			end=mid-1;
		}
	}
}


int main(int argc, char **argv) 
{
	int n=6000;
	int *arr=new int[n];

	for(int i=0;i<n;i++)
	{
		arr[i]=i+1;
	}
	
	int key=5500;
	
	int rank,size;
	
	MPI_Init(&argc,&argv);
	
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);

	cout<<"Processor rank: "<<rank<<"\nSize : "<<size<<endl;
	
	int blockSize=n/size;

	int i;
	for(i=0;i<size;i++)
	{
		if(rank==i)
		{
			double start=MPI_Wtime();
			binarySearch(arr, rank*blockSize, (rank+1)*blockSize-1, key, rank);
			double end=MPI_Wtime();
			cout<<"Execution time of Processor "<<rank<<" is "<<(end-start)*1000<<endl;
		}
	}
	MPI_Finalize();

	return 0;
}






//g++ -std=c++11 -fopenmp s.cpp -o test
//./s


//bfs



#include<iostream>
#include<omp.h>
#include<queue>
using namespace std;

class Node
{
	int data;
	Node *lchild,*rchild;
	
   public:
   	Node()
   	{
   		data = 0;
   		lchild = NULL;
   		rchild = NULL;
   	}
   	friend class Tree;
};

class Tree
{
	Node  *root;
	
  public:
  	Tree()
  	{
		root = NULL;  	
  	}
	
	void callBFS()
	{
		bfs(root);
	}
	
	void createNode(int data)
	{
		Node *a = new Node();
		a->data = data;
		root = a;
	}
	
	void callCreate()
	{
		int data;
		cout<<"\nEnter Data: \t";
		cin>>data;
		createNode(data);
	}
	
	void callInsert()
	{
		int data;
		cout<<"\nEnter data to be inserted: \t";
		cin>>data;
		root=insert(root,data);
	}
	
	Node *insert(Node *t,int data)
	{
		if(t==NULL)
		{
			t = new Node();
			t->data = data;
			return t;
		}
		
		Node *a = new Node();
		a->data = data;
		char ch;
		cout<<"\nOn which side u want to inser t(r/l)?:\t";
		cin>>ch;
		if(ch=='l')
		{
			t->lchild = insert(t->lchild,data);
		}
		else
		{
			t->rchild = insert(t->rchild,data);
		}
		return t;
		
	}
	
	void bfs(Node *t)
	{
		if(t==NULL)
		{
			cout<<"\nNo tree formed\n";
		}
		else
		{
			queue<Node *> q;
			q.push(t);
			int qSize;
			while(!q.empty())
			{
				qSize = q.size();
				
				#pragma omp parallel for
				for(int i=0;i<qSize;i++)
				{
					Node *currNode;
					
					#pragma omp critical
					{
						currNode =q.front();
						cout<<currNode->data<<" ";
						q.pop();
					}
					
					#pragma omp critical
					{
						if(currNode->lchild!=NULL)
						{
							q.push(currNode->lchild);
						}
						if(currNode->rchild!=NULL)
						{
							q.push(currNode->rchild);
						}
					}
				}
			}
		}
	}
};


int main()
{
	Tree t;
	char ans;
	
	t.callCreate();
	
	do{
		t.callInsert();
		cout<<"\nDo you want to insert more data: \n"<<endl;
		cin>>ans;
	}while(ans=='y'||ans=='Y');
	
	t.callBFS();
	
	return 0;
}

