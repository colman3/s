//ssh
//cat>>s.cu
//ctr+d
//nvcc sample.cu
//./a.out



// min.cu




#include<stdio.h>
#include<time.h>
#define N 2048

using namespace std;

__global__ void getMin(int input[])
{
	int tid = threadIdx.x;
	int step_count =1;
	int no_of_threads = blockDim.x;
	
	while(no_of_threads>0)
	{
		if(tid<no_of_threads)
		{
			int fst = tid*step_count*2;
			int snd = fst+step_count;
			
			if(input[fst]>input[snd])
				input[fst] = input[snd];
			else
				input[fst]=input[fst];
		}
		
		step_count <<=1;
		no_of_threads >>=1;
	}
	
}

int main()
{
	int *d_a;
	int *h_a;
	
	h_a = (int*)malloc(N*sizeof(int));
	cudaMalloc(&d_a,N*sizeof(int));
	
	for(int i=0;i<N;i++)
	{
		//h_a[i] = rand()%N;
		h_a[i] = N-i+1;
	}
	
	//printing the array
	for(int i=0;i<N;i++)
	{
		printf("%d  ",h_a[i]);
	}
	
	cudaMemcpy(d_a,h_a,N*sizeof(int),cudaMemcpyHostToDevice);
	
	clock_t t1 = clock();
	getMin <<<1,N/2>>>(d_a);	
	cudaDeviceSynchronize();
	clock_t t2 = clock()-t1;
	
	double time_taken;
	
	time_taken = ((double)t2)/CLOCKS_PER_SEC;
	
	int *result;
	result = (int*)malloc(sizeof(int));
	cudaMemcpy(result,d_a,sizeof(int),cudaMemcpyDeviceToHost);
	printf("Minimum number is: %d",result[0]);
	printf("Time taken is: %lf",time_taken);
	
	
	cudaFree(d_a);
	free(result);
	free(h_a);
	
	return 0;
}






//max.cu




#include<stdio.h>
#include<time.h>
#define N 2048

using namespace std;

__global__ void getMin(int input[])
{
	int tid = threadIdx.x;
	int step_count =1;
	int no_of_threads = blockDim.x;
	
	while(no_of_threads>0)
	{
		if(tid<no_of_threads)
		{
			int fst = tid*step_count*2;
			int snd = fst+step_count;
			
			if(input[fst]<input[snd])
				input[fst] = input[snd];
			else
				input[fst]=input[fst];
		}
		
		step_count <<=1;
		no_of_threads >>=1;
	}
	
}

int main()
{
	int *d_a;
	int *h_a;
	
	h_a = (int*)malloc(N*sizeof(int));
	cudaMalloc(&d_a,N*sizeof(int));
	
	for(int i=0;i<N;i++)
	{
		//h_a[i] = rand()%N;
		h_a[i] = N-i+1;
	}
	
	//printing the array
	/*for(int i=0;i<N;i++)
	{
		printf("%d  ",h_a[i]);
	}*/
	
	cudaMemcpy(d_a,h_a,N*sizeof(int),cudaMemcpyHostToDevice);
	
	clock_t t1 = clock();
	getMin <<<1,N/2>>>(d_a);	
	cudaDeviceSynchronize();
	clock_t t2 = clock()-t1;
	
	double time_taken;
	
	time_taken = ((double)t2)/CLOCKS_PER_SEC;
	
	int *result;
	result = (int*)malloc(sizeof(int));
	cudaMemcpy(result,d_a,sizeof(int),cudaMemcpyDeviceToHost);
	printf("Minimum number is: %d",result[0]);
	printf("Time taken is: %lf",time_taken);
	
	
	cudaFree(d_a);
	free(result);
	free(h_a);
	
	return 0;
}






//avg.cu






#include<stdio.h>
#include<time.h>
#define N 2048

using namespace std;

__global__ void getSum(int input[])
{
	int tid = threadIdx.x;
	int step_count =1;
	int no_of_threads = blockDim.x;
	
	while(no_of_threads>0)
	{
		if(tid<no_of_threads)
		{
			int fst = tid*step_count*2;
			int snd = fst+step_count;
			input[fst] += input[snd];
		}
		
		step_count <<=1;
		no_of_threads >>=1;
	}
	
}

int main()
{
	int *d_a;
	int *h_a;
	
	h_a = (int*)malloc(N*sizeof(int));
	cudaMalloc(&d_a,N*sizeof(int));
	
	for(int i=0;i<N;i++)
	{
		//h_a[i] = rand()%N;
		h_a[i] = N-i+1;
	}
	
	//printing the array
	/*for(int i=0;i<N;i++)
	{
		printf("%d  ",h_a[i]);
	}*/
	
	cudaMemcpy(d_a,h_a,N*sizeof(int),cudaMemcpyHostToDevice);
	
	clock_t t1 = clock();
	getSum <<<1,N/2>>>(d_a);	
	cudaDeviceSynchronize();
	clock_t t2 = clock()-t1;
	
	double time_taken;
	
	time_taken = ((double)t2)/CLOCKS_PER_SEC;
	
	int *result;
	result = (int*)malloc(sizeof(int));
	cudaMemcpy(result,d_a,sizeof(int),cudaMemcpyDeviceToHost);
	
	float avg = (float)result[0]/N;
	
	printf("Average is: %f",avg);
	printf("Time taken is: %lf",time_taken);
	
	
	cudaFree(d_a);
	free(result);
	free(h_a);
	
	return 0;
}









//stddev.cu






#include<stdio.h>
#include<time.h>
#include<math.h>
#define N 16

using namespace std;


__global__ void FindSum(float input[])
{
	int tid = threadIdx.x;
	int step_count = 1;
	int no_of_threads = blockDim.x;
	
	while(no_of_threads>0)
	{
		
		if(tid < no_of_threads)
		{
			int fst = tid*step_count*2;
			int snd = fst + step_count;
			input[fst]+=input[snd];
		}
		
		step_count <<=1;
		no_of_threads >>=1;
	}
}

__global__ void FindDiff(float input[],float mean)
{
	int tid = threadIdx.x;

	while(tid<N)
	{
		input[tid] = input[tid] - mean;
	}		
}

int main()
{
	float *h_a;
	h_a = (float*)malloc(N*sizeof(float));
	
	for(int i=0;i<N;i++)
	{
		h_a[i] = ((float)rand()/RAND_MAX)*N;
	}
	
	for(int i=0;i<N;i++)
	{
		printf("%f\n",h_a[i]);
	}
	
	//Sum Calculations
	float *d_a;
	cudaMalloc(&d_a,N*sizeof(float));
	cudaMemcpy(d_a,h_a,N*sizeof(float),cudaMemcpyHostToDevice);
	
	FindSum <<<1,N/2>>>(d_a);
	cudaDeviceSynchronize();
	
	float *sum;
	sum = (float*)malloc(N*sizeof(float));
	cudaMemcpy(sum,d_a,sizeof(float),cudaMemcpyDeviceToHost);
	
	//mean
	float mean = (float)sum[0]/N;
	
	//Mean-Diff
	float *d_mean,*g;
	cudaMalloc(&d_mean,sizeof(float));
	cudaMalloc(&g,N*sizeof(float));
	
	cudaMemcpy(d_mean,mean,sizeof(float),cudaMemcpyHostToDevice);
	cudaMemcpy(g,h_a,N*sizeof(float),cudaMemcpyHostToDevice);
	
	
	FindDiff<<<1,N>>>(g,d_mean);
	cudaDeviceSynchronize();
	
	float *dArray;
	dArray = (float*)malloc(N*sizeof(float));
	cudaMemcpy(dArray,g,N*sizeof(float),cudaMemcpyDeviceToHost);
	
	//Sum of Difference Array
	float *sDiff,*d_sArray;
	cudaMalloc(&d_sArray,N*sizeof(float));
	sDiff = (float*)malloc(sizeof(float));
	
	FindSum <<<1,N/2>>>(d_sArray);
	cudaDeviceSynchronize();
	
	cudaMemcpy(sDiff,d_sArray,sizeof(float),cudaMemcpyHostToDevice);
	
	float *temp;
	temp = (float*)malloc(sizeof(float));
	
	temp = (float)sDiff[0]/N;
	
	//stdDev
	
	float stdDev = sqrt(temp);
	
	printf("Standard Deviation: %f",stdDev);
	
	cudaFree(d_a);
	cudaFree(d_mean);
	cudaFree(g);
	cudaFree(d_sArray);
	free(h_a);
	free(temp);
	free(dArray);
	
	return 0;
}
	



// sum.cu








#include<stdio.h>
#include<time.h>
#define N 2048

using namespace std;


__global__ void FindSum(double input[])
{
	int tid = threadIdx.x;
	int step_size = 1;
	int no_of_threads = blockDim.x;
	
	while(no_of_threads>0)
	{
		if(tid<no_of_threads)
		{
			int fst = tid*step_size*2;
			 int snd = fst + step_size;
			input[fst]+=input[snd];
		}
		step_size <<=1;
		no_of_threads >>=1;
	}
}

int main()
{
	double *h_a;
	h_a = (double*)malloc(N*sizeof(double));
	double time_taken;
	
	
	//generating array
	for(int i=0;i<N;i++)
	{
		//h_a[i] = rand()%N;
		h_a[i] = i;
	}
	
	//printing Array
	for(int i=0;i<N;i++)
	{
		printf("%lf\n",h_a[i]);
	}
	printf("\n");
	
	double *d_a;
	cudaMalloc(&d_a,N*sizeof(double));
	cudaMemcpy(d_a,h_a,N*sizeof(double),cudaMemcpyHostToDevice);
	
	clock_t t1 = clock();
	
	FindSum <<<1,N/2>>>(d_a);
	cudaDeviceSynchronize();
	
	clock_t t2 = clock()-t1;
	
	double *result;
	result = (double*)malloc(sizeof(double));
	
	cudaMemcpy(result,d_a,sizeof(double),cudaMemcpyDeviceToHost);
	
	printf("\nSum: \t%lf",result[0]);
	time_taken = ((double)t2)/CLOCKS_PER_SEC;
	printf("Time Taken:%lf",time_taken);
	
	printf("\nSerial processing:\n");
	float res=0;
	
	clock_t t3 = clock();
	for(int i=0;i<N;i++)
	{
		res +=h_a[i];
	}
	clock_t t4 = clock()-t3;
	printf("Seq Result: %f",res);
	time_taken = ((double)t4)/CLOCKS_PER_SEC;
	printf("Time Taken:%lf",time_taken);
	
	cudaFree(d_a);
	free(h_a);
	free(result);
	return 0;
	

}






